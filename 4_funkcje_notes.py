# -*- coding: utf-8 -*-
"""4. Funkcje notes.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Cvb0HXUAbhJKyACB-eH9GWIKPbccmFVm

# Funkcje

## Ćwiczenie 1

Napisz funkcję o nazwie check_range, która sprawdza, czy liczba znajduje się w podanym zakresie (zawiera zarówno niski *__i__* wysoki). <br>
Jeśli tak, zwróć „x jest między y a z”. <br>
Jeśli tak nie jest, zwróć „x NIE jest między y a z”. <br>
Gdzie:
- x to liczba
- y jest dolną granicą
- z to górna granica
"""

def check_range(x, y, z):
  if x >= y and x <= z:
    return 'x jest między y a z'
  else:
    return 'x NIE jest między y a z'

check_range(34, 9, 228)

check_range(7, 2, 5)

"""Napisz funkcję o nazwie bool_range, która robi to samo, ale zwraca tylko wartość logiczną."""

def bool_range(x, y, z):
  if x >= y and x <= z:
    return True
  else:
    return False

bool_range(7, 5, 20)

bool_range(67, 22, 25)

"""## Ćwiczenie 2

Napisz funkcję o nazwie unique_list, która pobiera listę i zwraca listę zawierającą tylko unikalne elementy danych wejściowych.
"""

def unique_list(my_list):
  unique_list = []
  for i in my_list:
    if my_list.count(i) == 1:
        unique_list.append(i)
    else:
        continue
  my_list = unique_list
  return my_list

my_list = [1,3,5,6,4,3,2,3,3,4,3,4,5,6,6,4,3,2,12,3,5,63,4,5,3,3,2]

unique_list(my_list)

"""Znajdź inny sposób wykonania tej samej operacji bez definiowania funkcji."""

unique_list = []

for i in my_list:
    if my_list.count(i) == 1:
        unique_list.append(i)
    else:
        continue
print(unique_list)

"""## Ćwiczenie 3

Napisz funkcję o nazwie objętość_kuli, która przyjmuje promień kuli i zwraca jej objętość zaokrągloną do 2 dp. (Google wzór na objętość kuli, użyj pi = 3,14)
"""

def volume_of_sphere (r):
  pi = 3.14
  wzor = (4/3) * pi * pow(r, 3)
  return round(wzor, 2)

volume_of_sphere(2)



"""## Rekursja

## Ćwiczenie 4

Zdefiniuj funkcję rekurencyjną o nazwie num_fact, która zwraca silnię podanej liczby.
"""

def num_fact (x):
  y = 1
  for i in range(2,x+1):
    y*=i
  return y

num_fact(1)